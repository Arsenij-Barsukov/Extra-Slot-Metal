global u8 Metal.Palette
global bool metal.partner

function bool Standalone.onWriteToSpriteTable(s16 px, s16 py, u16 renderQueue)
{
	u8 gameMode = global.game_mode & 0x7f
	bool prioFlag = (objA0.sprite_attributes & 0x8000) != 0
	if (XtraChar == 3)
    	if(objA0.update_address == 0x0837b2 && XtraChar == 3) //SIGNPOST
        {		
    		if(objA0.animation.sprite == 0x00 && XtraChar == 3)//METAL
    		{		
			u8 atex = 0x40 + 0x20 * getMainCharacter()
			if (global.zone_act == 0x0100)||(global.zone_act == 0x0101) //use the underwater colored for hydrocity 1 and 2 (the sign is moved during act transition)
			{
				Renderer.drawCustomSprite("goal_metal_UW", px, py, atex, prioFlag ? SPRITE_FLAG_PRIO : 0 , renderQueue)
			}
			else
			{
				Renderer.drawCustomSprite("goal_metal", px, py, atex, prioFlag ? SPRITE_FLAG_PRIO : 0 , renderQueue)
			}
			return true
		}            
    }
	 //CHARACTERS TEXTS
	//  - Character name			-> objA0.animation.sprite = 0x13 ... 0x16
	if (objA0.update_address == 0x02dd98 && XtraChar == 3)
    	{
    		if (objA0.animation.sprite == 0x13 && XtraChar == 3)	//Metal
    		{
			Renderer.drawCustomSprite("metal_text", px + 0x15, py + 0x8, 0x00, 0x40, renderQueue)
			return true
		}
	}
	
	// CHARACTERS TEXTS FOR BLUESPHERES
	//  - Character name			-> objA0.animation.sprite = 0x13 ... 0x16
	// objA0.animation.sprite:
	//  - 0x17, 0x31, 0x36 = "Score"
	//  - 0x18, 0x32, 0x37 = "Ring Bonus"
	//  - 0x19, 0x33, 0x38 = "Perfect"
	//  - 0x1a, 0x34, 0x39 = "Continue"
	//  - 0x13			   = "Sonic"
	//  - 0x14			   = "Miles" (not verified)
	//  - 0x15			   = "Tails"
	//  - 0x16			   = "Knuckles" (not verified)
	//  - 0x23			   = "got a"
	//  - 0x24			   = "Chaos Emerald"
	//  - 0x30			   = "Super Emerald"
	if (gameMode == 0x48 || gameMode == 0x0c)	// Blue Spheres results + fade to main game afterwards
	{
		// Blue Spheres results texts
		if (objA0.update_address == 0x02ea50)
		{
			bool isSKStage = (global.lock_on_state == 0 && global.sk_bluespheres)
			
			if (objA0.animation.sprite == 0x13)	// METAL
			{
				Renderer.drawCustomSprite("metal_text", px + 0x15, py + 0x8, 0x00, 0x40, renderQueue)
				return true
			}			
		}
	}
   //ENDING
	//small characters on the tornado
	//this object address is for BOTH the character ON the plane and the driver!
	//check its subtype as well
	if (objA0.update_address == 0x05ed18 && (XtraChar != 3 && !isMainCharacter(CHARACTER_SONIC))) //standing character
	{				
		
		if (objA0.subtype2c != 0) //standing character
		{
			u8 atex = 0x40 + 0x20 * getSecondCharacter()
			u64 key
			key = "MetalMini"
			Renderer.drawCustomSprite(key, px, py, atex, (objA0.render_flags & 0x01) | (prioFlag ? SPRITE_FLAG_PRIO : 0), renderQueue, 0, 255)		
			return true
		}
		else //pilot
		{ // DON'T RENDER HERE
			return false
		}		

	}
	
	//small and micro plane
	//small plane and micro outside
	//0x05d86a is contemporarily the small tornado flying right and the micro one flying left!
	if(objA0.update_address == 0x05d86a)
	{    
		if (XtraChar != 3 && !isMainCharacter(CHARACTER_SONIC))
		{ //nothing here
			return false
		}	
		u8 atex = 0x40 + 0x20 * getMainCharacter()
		u64 key
	
		//if flying left use the micro character
		if (char.render_flags & 0x01)
		{			
			key = "MetalMicro"
			Renderer.drawCustomSprite(key, px, py, atex, (objA0.render_flags & 0x01) | (prioFlag ? SPRITE_FLAG_PRIO : 0), renderQueue+1)
			return true
		}
		else
		{ //this would be the small tornado, so render normally.
			return false
		}		
	}

	//Final sprite, regardless of ending type for the chars.
	if(objA0.update_address == 0x05e18a) 
    {	
		u64 key
        if (XtraChar != 3 && !isMainCharacter(CHARACTER_SONIC))
		{
			key = "MetalPose"
			Renderer.drawCustomSprite(key, px, py, 0x20, objA0.render_flags | (prioFlag ? SPRITE_FLAG_PRIO : 0), renderQueue)
		return true        
		}		
    }
	
	//Bluespheres Palette
	if (gameMode == 0x34) && (XtraChar != 3 && !isMainCharacter(CHARACTER_SONIC)) //just check for metal, thanks!
	{
		// Characters in special stage
		if (objA0.update_address == 0x00903e)// || objA0.update_address == 0x00927a) Just player one, thanks!
		{
			u8 character = getMainCharacter()
			u8 atex = 0x00
			u8 bluesphereframe = level.framecounter & 0x01
			u64 key = stringformat("bluesphere_metal_%d_0x%02x", bluesphereframe, objA0.animation.sprite)
			if (Renderer.hasCustomSprite(key))
			{
				// Check if there's also a custom palette
				u64 paletteKey = (Metal.Palette == 0) ? "bluesphere_ultimate_metal" : (Metal.Palette == 1) ? "bluesphere_CD_metal" : (Metal.Palette == 2) ? "bluesphere_chaotix_metal" : (Metal.Palette == 3) ? "bluesphere_mania_metal" : (Metal.Palette == 4) ? "bluesphere_silver_metal" : (Metal.Palette == 5) ? "bluesphere_robo_metal" : (Metal.Palette == 6) ? "bluesphere_mecha_metal" : (Metal.Palette == 7) ? "bluesphere_MK2_metal" : "bluesphere_kai_metal"
				if (System.hasExternalPaletteData(paletteKey, 0))
				{
					atex = 0x40 + character * 0x20
				}
			}
			else //let's say someone deleted the bluespheres sprites...at least they'll see sonic...
			{		
				//I don't care it's internal sprite rendering! Pick the external palette ANYWAY!
					
				u64 paletteKey = (Metal.Palette == 0) ? "bluesphere_ultimate_metal" : (Metal.Palette == 1) ? "bluesphere_CD_metal" : (Metal.Palette == 2) ? "bluesphere_chaotix_metal" : (Metal.Palette == 3) ? "bluesphere_mania_metal" : (Metal.Palette == 4) ? "bluesphere_silver_metal" : (Metal.Palette == 5) ? "bluesphere_robo_metal" : (Metal.Palette == 6) ? "bluesphere_mecha_metal" : (Metal.Palette == 7) ? "bluesphere_MK2_metal" : "bluesphere_kai_metal"
				if (System.hasExternalPaletteData(paletteKey, 0))
				{
					atex = 0x40 + character * 0x20
				}
				key = Renderer.setupCustomCharacterSprite(0x0aaa7c, 0x0abe14, objA0.mapping_offset, objA0.animation.sprite, 0x00)
			}
			Renderer.drawCustomSprite(key, px, py, atex, prioFlag ? SPRITE_FLAG_PRIO : 0, renderQueue)
			return true
		}

		// Tails' tails object in special stage isn't here...look in the real onWriteToSpriteTable!		
	}
	
	
	
	
    return base.Standalone.onWriteToSpriteTable(px, py, renderQueue)
}

//Palette selection for Metal
//SET THE PALETTE -- REGULAR GAME HAS ITS OWN ENTRY
function u64 getCharacterPaletteKey(u8 character)
{
	if (XtraChar == 3 && character == CHARACTER_SONIC)
	{
		if (Metal.Palette == 0)
		{
		return "character_ultimate_metal"
		}
		else if (Metal.Palette == 1)
		{
		return "character_CD_metal"
		}
		else if (Metal.Palette == 2)
		{
		return "character_chaotix_metal"
		}
		else if (Metal.Palette == 3)
		{
		return "character_mania_metal"
		}
		else if (Metal.Palette == 4)
		{
		return "character_silver_metal"
		}
		else if (Metal.Palette == 5)
		{
		return "character_robo_metal"
		}
		else if (Metal.Palette == 6)
		{
		return "character_mecha_metal"
		}
		else if (Metal.Palette == 7)
		{
		return "character_MK2_metal"
		}
		else if (Metal.Palette == 8)
		{
		return "character_kai_metal"
		}
     else if (Metal.Palette == 9)
		{
		return "character_furnace_metal"
      }
      else
		{
		return "character_s3k_metal"

		}

	}

    return base.getCharacterPaletteKey(character)
}

//Bluespheres Palette --- it's in the first block of the special stage code!
//# address-hook(0x0081c6) end(0x00858e)
function void SpecialStage()
{
	//let's load this only for Metal
	if (XtraChar != 3 && !isMainCharacter(CHARACTER_SONIC))
	{
		base.SpecialStage()
		return
	}




#if STANDALONE
	playMusic(MUSIC_CTRL_FADEOUT)
#else
	playMusic(MUSIC_CTRL_STOP)
#endif

	kosinski.queue_size = 0
	zeroMemory(0xffffff10, 0x6c)

	ClearPatternLoadingQueue()
	FadeScreenToWhiteBlocking()

#if STANDALONE
	// Add a small artificial delay here
	for (u8 i = 0; i < 12; ++i)
		yieldInWhiteScreen()
#endif

	set_status_register(0x2700)

	VDP.Config.enableHInt(false)
	VDP.Config.setNameTableBasePlaneA(0xc000)
	VDP.Config.setNameTableBasePlaneB(0xe000)
	VDP.Config.setPlayfieldSizeInPixels(512, 256)
	VDP.Config.setupWindowPlane(false, 0)	// Disable window plane
	VDP.Config.setVerticalScrolling(false, 0)
	VDP.Config.setBackdropColor(0x20)
	VDP.Config.setRenderingModeConfiguration(false)
	water.fullscreen = 0

	fn0011ca()

	zeroMemory(0xffffac00, 0x400)
	zeroMemory(0xffffb000, 0x2000)
	zeroMemory(0xfffffe6e, 0x4c)
	zeroMemory(0xffffe400, 0x100)

	u32[0xfffffe66] = 0
	u32[0xfffffe6a] = 0

	fn01aa6e()

	u16[0xfffffb00] = 0
	u32[0xfffffbfc] = 0xfffffb00

	// Load special stage palette
	//  -> Character colors is the 8 colors from 0xfffffc90 (for Sonic/Knuckles) and 0xfffffcb0 (for Tails)
	copyMemory(0xfffffc80, 0x00896e, 0x100)
	//if (global.characters == CHARS_KNUCKLES_ALONE)
	//{
	//	copyMemory(0xfffffc90, 0x0089ee, 0x10)
	//}

#if STANDALONE
	//u64 paletteKey = (XtraChar != 3 && !isMainCharacter(CHARACTER_SONIC)) ? "bluesphere_palette_sonic" : isMainCharacter(CHARACTER_TAILS) ? "bluesphere_palette_tails" : "bluesphere_palette_knuckles"
	u64 paletteKey = (Metal.Palette == 0) ? "bluesphere_ultimate_metal" : (Metal.Palette == 1) ? "bluesphere_CD_metal" : (Metal.Palette == 2) ? "bluesphere_chaotix_metal" : (Metal.Palette == 3) ? "bluesphere_mania_metal" : (Metal.Palette == 4) ? "bluesphere_silver_metal" : (Metal.Palette == 5) ? "bluesphere_robo_metal" : (Metal.Palette == 6) ? "bluesphere_mecha_metal" : (Metal.Palette == 7) ? "bluesphere_MK2_metal" : "bluesphere_kai_metal"
	u16 numColors = System.loadExternalPaletteData(paletteKey, 0, 0x800000, 0x20)
	if (numColors > 0)
	{
		u32 dest = 0x802180 + getMainCharacter() * 0x40
		for (u16 i = 0; i < numColors; ++i)
		{
			u16[dest + i * 2] = packColor(u32[0x800000 + i * 4])
		}
	}
#endif

	Nemesis.loadDataToVRAM(0x0b07b8, 0x0000)

	fn0085b0()

	Enigma.decompress(0x0aef54, 0xffff5500, 0x0000)
	copyRectToVRAM(0xffff5500, 0xc000, 0x28, 0x1c)

	Nemesis.loadDataToVRAM(0x0ad904, 0xd000)
	Nemesis.loadDataToVRAM(0x0adf60, 0xb4e0)
	Nemesis.loadDataToVRAM(0x0aeed0, 0xb360)
	Nemesis.loadDataToVRAM(0x0ad472, 0xabe0)
	Nemesis.loadDataToVRAM(0x0ad5f4, 0xdf00)
	Nemesis.loadDataToVRAM(0x0ad650, 0xf020)

	A0 = 0x0ad650
	A4 = 0xffffe020
	fn0015cc()

	Nemesis.loadDataToVRAM(0x0ad7bc, 0xb120)
	Nemesis.loadDataToVRAM(0x0ad430, 0xf400)

	copyRectToVRAM(0x008d2c, 0xc084, 0x08, 0x03)
	copyRectToVRAM(0x008d2c, 0xc0bc, 0x08, 0x03)

	Enigma.decompress(0x0aedb0, 0xffff0000, 0x459b)
	copyRectToVRAM(0xffff0000, 0xe000, 0x40, 0x20)

	Kosinski.decompress(0x0b2e36, 0xffff0000)

	fn009ea0()
	fn00a0e6()

	global.level_started = 0
	bluespheres.bs_hud_dirty = 0xff
	bluespheres.rings_flags = 0x80
	bluespheres.current_gamespeed = 0x1000
	bluespheres.speedup_countdown = BlueSpheres.useGeneratedStages() ? 2700 : 1800
	camera.foreground.x.u16 = 0
	camera.foreground.y.u16 = 0
	level.height.bitmask = 0xffff

	u32[0xffffb000] = 0x008faa
	if (getNumPlayers() >= 2)
	{
		u32[0xffffb04a] = 0x009212
	}
	u32[0xffffb094] = 0x008df8
	u32[0xffffb0de] = 0x008e40
	UpdateGameObjects()

	fn009d9e()
	fn009dde()
	RenderSprites()

	BlueSpheres.RenderSpheres()
	fn009d5e()

	u8[0xffffe433] = 0x01
	global.frame_state = 0x1c

	waitForNextFrame()

	u8[0xffffe433] = 0
	VDP.Config.setRenderingModeConfiguration(true)		// Enable shadow/highlight palette mode

	global.demo_countdown = 1800
	fn0075d2()

#if STANDALONE
	if (BlueSpheres.useGeneratedStages())
	{
		playMusic(0xf8)		// Different music track, one that speeds up the music only every 45 (instead of 30) seconds
	}
	else
#endif
	{
		playMusic(0x1c)
	}

	VDP.Config.setActiveDisplay(true)
	BlueSpheres.FadeIn()

	while (true)
	{
		UpdateGamePause()
		global.frame_state = 0x1c
		Kosinski.ProcessDecompressionQueue()

		waitForNextFrame()
	@EntryPoint:

		++level.framecounter
		UpdateRollingDemo()
		UpdateGameObjects()

		fn009d9e()
		fn009dde()
		RenderSprites()

		BlueSpheres.RenderSpheres()
		BlueSpheres.RenderCharacterSprites()
		fn009d5e()
		fn009b62()

	#if GAMEAPP
		BlueSpheres.renderCustomGround()
		BlueSpheres.renderCustomCharacterShadows()
	#else
	#if STANDALONE
		Renderer.setViewport(getScreenExtend(), 0, 320, 224, 0x0000)
	#endif
	#endif

		LoadRequiredSpritePatterns()
		Kosinski.ProcessModules()

		if (global.rolling_demo && global.demo_countdown == 0)
			break

		if (global.game_mode != 0x34)	// Blue Spheres game mode
			break

	#if STANDALONE
		// Only needed to support restart from the Pause Menu
		//  -> Not used at the moment, so nevermind
		if (level.restart)
		{
			global.game_mode = 0x0c
			return
		}
	#endif
	}

	if (global.rolling_demo)
	{
		global.game_mode = 0
	}

	global.demo_countdown = 60
	palette_fade.range = 0x003f
	u16[0xfffff794] = 0

	while (true)
	{
		global.frame_state = 0x1c

		waitForNextFrame()

		UpdateRollingDemo()
		UpdateGameObjects()

		fn009d9e()
		fn009dde()
		RenderSprites()

		BlueSpheres.RenderSpheres()
		fn009d5e()
		fn009b62()

	#if GAMEAPP
		BlueSpheres.renderCustomGround()
		BlueSpheres.renderCustomCharacterShadows()
	#else
	#if STANDALONE
		Renderer.setViewport(getScreenExtend(), 0, 320, 224, 0x0000)
	#endif
	#endif

		LoadRequiredSpritePatterns()
		Kosinski.ProcessModules()

		--u16[0xfffff794]
		if (s16[0xfffff794] < 0)
		{
			u16[0xfffff794] = 2
			FadePaletteToWhite()
		}

		if (global.demo_countdown == 0)
			break
	}
}

//Tails partner
function bool Standalone.drawCharacterSprite(u8 character, u8 variant, s16 px, s16 py, bool asSmallGhost)
{
    u64 key = 0
    if (A0 != 0xffffb000 && XtraChar == 3)
        key = stringformat((metal.partner==1) ? "metal_tails0x%02x" : "tails_doll0x%02x", animationSprite)
}