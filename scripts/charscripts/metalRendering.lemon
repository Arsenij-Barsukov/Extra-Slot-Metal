function bool Standalone.drawCharacterSprite(u8 character, u8 variant, s16 px, s16 py, bool asSmallGhost)
{
	//metal animations will override the normal render
	// THE VARIABLE IS CHANGING BRIEFLY TO 1 on the plane and to a value > 2 when super on the sea...why!?
	if ((XtraChar == 3 && character == CHARACTER_SONIC || char.character > 2) && variant < 2 && char.state != 0x34)  //NOT FROZEN IN ICZ REDESIGNED
	//metal and NOT tails' tails
	{//custom render routines
		return MetalCustomRendering(character, variant, px, py, asSmallGhost)
	}
	else
	{		
		return base.Standalone.drawCharacterSprite(character, variant, px, py, asSmallGhost)
	}
}

global u8 Metal.DischargeCounter //Frame counter for the special effects
global u8 Metal.DischargeUsed //Frame counter for the lingering effect
global s16 Metal.PX
global s16 Metal.PY
global u16 Metal.cameraOLDX
global u16 Metal.cameraOLDY
global u8 Metal.OverdriveCounter
global u8 Metal.Overdrive //which animation of the overdrive should play?
global u8 Metal.Exaust //do I have to draw the exaust?
global u8 Metal.Palette

function bool MetalCustomRendering(u8 character, u8 variant, s16 px, s16 py, bool asSmallGhost)
{
	bool isPlayer1 = (variant == 0)
	u32 characterAddress = isPlayer1 ? 0xffffb000 : 0xffffb04a
	u8 animationSprite = char.animation.sprite
	u16 animationSpriteEx = Standalone.getModdedAnimationSpriteEx(character, animationSprite)
	u8 flags = (char.render_flags & 0x03)
	u8 angle = 0
	u64 key = 0
	u8 rotationMode = 0
	
	//no block for tails' tails
	
	if (level.vertical_wrap == 0xff00)
	{
		// For vertically wrapping levels, "normalize" py into interval [-move_area.bottom.target * 3/4, -move_area.bottom.target * 1/4]
		py &= level.height.bitmask
		if (py > move_area.bottom.target * 3/4 && move_area.bottom.target >= 0xe0)	// move_area.bottom.target is very low in DEZ boss act
			py -= move_area.bottom.target
	}

	if (variant < 2)
	{//It's a character, not Tails' Tails
	
		if (Game.getSetting(SETTING_SMOOTH_ROTATION))
		{
			// Character
			if (animationSprite >= 0x01 && animationSprite <= 0x20)
			{
				animationSprite = 0x01 + (animationSprite - 0x01) % 8
				rotationMode = 1
			}
			else if (animationSprite >= 0x21 && animationSprite <= 0x30)
			{
				animationSprite = 0x21 + (animationSprite - 0x21) % 4
				rotationMode = 1
			}
			else if (animationSprite >= 0x78 && animationSprite <= 0x7f)
			{
				animationSprite = 0x78
				rotationMode = 2
			}

			if (rotationMode != 0)
			{
				s8 oldRotation = isPlayer1 ? oldRotationPlayer1 : oldRotationPlayer2
				flags = char.flags & char.flag.FACING_LEFT		// This really has to be "char.flags", not "char.render_flags"

				angle = char.rotation
				if (rotationMode == 1)
				{
					if (abs(s8(char.rotation)) <= 0x10 && abs(s8(oldRotation)) <= 0x10)
					{
						angle = 0
					}

					if (angle != char.rotation)
					{
						s8 diff = angle - oldRotation
						angle = oldRotation + clamp(diff, -3, 3)
					}
				}
			}

			if (isPlayer1)
				oldRotationPlayer1 = angle
			else
				oldRotationPlayer2 = angle
		}
//CUSTOM ANIMATIONS FOR METAL
		
		// HANDLES OVERDRIVE, STANDING SUPER, HIGH SPEED and DISCHARGE when transformed		
		if (XtraChar == 3 && character == CHARACTER_SONIC)//always check && animationSpriteEx == animationSprite)	// Last check is only false if modded scripts made their own changes
		{

			//Fix super standing animation (it overlaps with wait in normal form)
			if ((animationSprite >= 0xbb && animationSprite <= 0xc2) && super.active != 0)
			{
				animationSprite = 0xba
			}
			//END OVERDRIVE -> too slow or not running
			//I know I should use pitagora for the speed, but I'm lazy.
			if (Metal.OverdriveCounter > 0	&& (animationSprite < 0x21 || animationSprite > 0x30 || abs(char.groundspeed) < 0x800 ||((char.flags & char.flag.IN_AIR) && (abs(char.velocity.y) + abs(char.velocity.x)) < 0x800)    ))
			{
				Metal.Overdrive = 0
				Metal.OverdriveCounter = 0
			}
			//END DISCHARGE (1.1 also deactivate in bonus stages)
			if  ( Metal.DischargeCounter>0 && ( !(char.flags & char.flag.IN_AIR) ||char.state != char.state.ROLLING || global.zone == 0x13 || global.zone == 0x14 || global.zone == 0x15  ) )
			{
				Metal.DischargeCounter = 0
				Metal.DischargeUsed = 1
			}
			
			//RUN - Fastrun - Flight (metal has to handle the overdrive animation)
			if (animationSprite >= 0x21 && animationSprite <= 0x30)
			{	
				if ((abs(char.groundspeed) >= 0x700)||(sonic.fastrunanim.timer > 0)||super.active)
				{
					if (!Game.getSetting(SETTING_SMOOTH_ROTATION))
					{ //The animation has to be rotated if necessary
						angle = (animationSprite - 0x21) / 4 * 0xe0
						if (char.flags & char.flag.FACING_LEFT)
						angle = -angle		   
					}
					//play the fast run or the overdrive animation					
					if (Metal.Overdrive>0)
					{
						//use >> 1 as 1 frame only blurs too much
						animationSpriteEx = (level.framecounter >> 1) & 0x01
						key = stringformat("metal_overdrive_%d", animationSpriteEx)
					}
					else
					{
						animationSpriteEx = level.framecounter & 0x01
						if (animationSpriteEx == 1)
							Metal.Exaust = 2 //draw for this additional frame too
						else
							Metal.Exaust = 3
						key = stringformat("metal_fastrun_%d", animationSpriteEx)
					}
				}
			}
			//Exaust effect -> draw if specific frames are on
			if  (Metal.Exaust == 0) && (Metal.Overdrive==0) &&(animationSprite == 0x22 || animationSprite == 0x24 || animationSprite == 0x26 || animationSprite == 0x28 || animationSprite == 0x2a || animationSprite == 0x2c || animationSprite == 0x2e || animationSprite == 0x30  || animationSprite == 0xef || animationSprite == 0xf0 || (animationSprite >= 0xf4 &&  animationSprite <= 0xfa))	 
			{
				Metal.Exaust = 1
			}
			//DISCHARGE ACTION
			if (Metal.DischargeCounter >= 5)
			{
				animationSpriteEx = (level.framecounter >> 1) & 0x01
				key = stringformat("metal_charge_%d", animationSpriteEx)
			}
				
		}
		
		timeattack.animSpriteEx = animationSpriteEx

		if (key == 0)
		{
			if (XtraChar == 3 && character == CHARACTER_SONIC)
			{ //Metal has no second set of super sprites to use
				key = stringformat("character_slot3_0x%02x", animationSprite)
				//key = stringformat(super.active ? "character_supersonic_0x%02x" : "character_sonic_0x%02x", animationSprite)
			}			

			if (!Renderer.hasCustomSprite(key))
			{
				u32 sourceBase    = (XtraChar == 3 && character == CHARACTER_SONIC) ? ((animationSprite >= 0xda) ? 0x140060 : 0x100000) : (character == CHARACTER_TAILS) ? ((animationSprite >= 0xd1) ? 0x143d00 : 0x3200e0) : 0x1200e0
				u32 tableAddress  = (XtraChar == 3 && character == CHARACTER_SONIC) ? (super.active ? 0x148378 : 0x148182) : (character == CHARACTER_TAILS) ? 0x14a08a : 0x14bd0a
				u32 mappingOffset = (XtraChar == 3 && character == CHARACTER_SONIC) ? (super.active ? 0x146816 : 0x146620) : (character == CHARACTER_TAILS) ? 0x148eb8 : 0x14a8d6		// Not really necessary here, we could also use "char.mapping_offset"

				key = Renderer.setupCustomCharacterSprite(sourceBase, tableAddress, mappingOffset, animationSprite, 0x00)
			}
		}
	}
	else // Tails' tails
	{
		//who cares, metal has no tails!
	}

	u16 renderQueue = 0xa000 - char.sprite_priority
	u8 atex = (char.sprite_attributes >> 9) & 0x30
	if (EXTENDED_CHARACTER_PALETTES)
		atex = 0x40 + character * 0x20

	if (char.sprite_attributes & 0x8000)
		flags |= SPRITE_FLAG_PRIO

	if (rotationMode != 0 && global.inv_gravity)
	{
		// Correction for inverse gravity
		angle = 128 - angle
		flags ^= SPRITE_FLAG_FLIP_X
	}

	// Render character
	if (asSmallGhost)
	{
		Renderer.drawCustomSprite(key, px, py, atex, flags | SPRITE_FLAG_PRIO, 0xa800, angle, 0xc0ffffff, 0x8000)
	}
	else
	{ //no idea why but png have lower priority in the render...so +1 they get
		if (key == "metal_charge_1" || key == "metal_overdrive_1")
		{
			Renderer.drawCustomSprite(key, px, py, atex, flags, renderQueue +1, angle, 255)
		}
		else
		{
			Renderer.drawCustomSprite(key, px, py, atex, flags, renderQueue, angle, 255)
		}
	}

//draw effects -> boosters, overdrive aura or discharge
	//boosters -- this way they are palette independant
	//Draw the extra sprite above the character
	if (Metal.Exaust > 0)
	{	
		if (Metal.Exaust == 1)
		{
			u64 key2 = stringformat("metal_exaust_0x%02x", animationSprite)
		//account for gravity --> 0x02	
			Renderer.drawCustomSprite(key2, px, py, atex, flags, renderQueue+1, angle, 255)
		}
		else if (Metal.Exaust == 2)
		{//handle the only frame that doesn't have internal numbering
			u64 key2 = stringformat("metal_exaust_1", animationSprite)
			Renderer.drawCustomSprite(key2, px, py, atex, flags, renderQueue+1, angle, 255)
		}
		Metal.Exaust = false
	}
	
	if (Metal.Overdrive == 1)&&((level.framecounter >> 1) & 0x01 > 0 )
	{
		u64 key2 = stringformat("metal_aura_still", 0)
		Renderer.drawCustomSprite(key2, px, py, atex, flags, renderQueue, angle, 255)
	}
	if (Metal.Overdrive == 2)
	{
		animationSpriteEx = level.framecounter & 0x03
		u64 key2 = stringformat("metal_boost_%d", animationSpriteEx)
		Renderer.drawCustomSprite(key2, px, py, atex, flags, renderQueue+1, angle, 255)
	}
	
	//discharge
	if (Metal.DischargeCounter > 0)//&&((level.framecounter >> 1) & 0x01 > 0 )
	{
		u64 key2
		if (Metal.DischargeCounter < 3) //start frame
		{
			key2 = stringformat("metal_discharge_start", 0)
			Renderer.drawCustomSprite(key2, px, py, atex, flags, renderQueue+1, angle, 200)
		}
		else if (Metal.DischargeCounter < 5)
		{
			key2 = stringformat("metal_discharge_end_0", 0)
			Renderer.drawCustomSprite(key2, px, py, atex, flags, renderQueue+1, angle, 200)
		}
		else //5 6 - 7 8 - 9 10 - 11 12
		{
			key2 = stringformat("metal_discharge_%d", (Metal.DischargeCounter - 5)/2 )
			Renderer.drawCustomSprite(key2, px, py, atex, flags, renderQueue-1, angle, 200)
		}		
		Metal.DischargeCounter = Metal.DischargeCounter + 1
		if (Metal.DischargeCounter > 12) //loop animation cycle
		{
			Metal.DischargeCounter = 5
		}
	}
	//end discharge effect -> on specific position
	if (Metal.DischargeUsed > 0)&&((level.framecounter >> 1) & 0x01 > 0 )
	{
		if (Metal.DischargeUsed == 1)
		{
			Metal.PX = px
			Metal.PY = py
			Metal.cameraOLDX = camera.position.x.u16
			Metal.cameraOLDY = camera.position.y.u16
		}
		//calculate where the effect moves on screen then set old camera coords
		Metal.PX = Metal.PX + (Metal.cameraOLDX - camera.position.x.u16)
		Metal.PY = Metal.PY + (Metal.cameraOLDY - camera.position.y.u16)
		Metal.cameraOLDX = camera.position.x.u16
		Metal.cameraOLDY = camera.position.y.u16
		u64 key2
		key2 = stringformat("metal_discharge_end_%d", (Metal.DischargeUsed-1) / 2)
		Metal.DischargeUsed = Metal.DischargeUsed + 1
		Renderer.drawCustomSprite(key2, Metal.PX, Metal.PY, atex, flags, renderQueue-1, angle, 150)
		if (Metal.DischargeUsed > 5) //loop animation cycle
		{
			Metal.DischargeUsed = 0
		}
	}
	
//additional effects - end	

	bool useAfterImages
	if (isPlayer1)
	{
		//Handle Metal's overdrive as well
		if ((super.active == 0xff) || (super.active.tails == 0xff) || (Metal.Overdrive > 1))
		{
			useAfterImages = true
		}
		else
		{
			if (Game.getSetting(SETTING_SPEEDUP_AFTERIMGS))
			{
				useAfterImages = ((u8[characterAddress + 0x2b] & char.bonus.SPEED_UP) != 0)
			}
		}
	}

	if (useAfterImages)
	{
		// Additional offset for Sonic charging a Super Peel-Out (either Hyper Sonic or with Speed Shoes)
		s16 afterImagesOffsetX = 0
		if ((XtraChar == 3 && character == CHARACTER_SONIC) && char.spindash == 0x80)
		{
			afterImagesOffsetX = (char.groundspeed >> 7) * ((char.flags & char.flag.FACING_LEFT) ? 1 : -1)
		}

		for (s8 i = 3; i > 0; --i)
		{
			A1 = 0xffffe500 + u8(posbackup.offset.player1 - (i * 8 + 4))
			s16 px0 = u16[A1] - camera.foreground.x.u16 + (i * afterImagesOffsetX / 4)
			s16 py0 = u16[A1+2] - camera.foreground.y.u16
			Renderer.drawCustomSprite(key, px0, py0, atex, flags, renderQueue - i, angle, 192 - i * 32)
		}
	}

	// Prevent emulator-like rendering
	return true
}